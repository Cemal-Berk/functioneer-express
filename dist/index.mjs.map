{"version":3,"sources":["../lib/functioneer-express.ts"],"sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport { Functioneer, FunctionObjectCall } from \"functioneer\";\r\n\r\n/**\r\n * Gets an express middleware for running a function. The function result\r\n * will be sent as a response\r\n * @param runner The function runner\r\n * @param dataSource Where to get the input data from\r\n * @param functionName The function name to be executed. If null the function name will be taken from the input data\r\n * @returns async (req: Request, res: Response, next: NextFunction)\r\n */\r\nexport function getExpressHandler(\r\n  runner: Functioneer,\r\n  dataSource: \"BODY\" | \"PARAMS\" | \"QUERY\",\r\n  functionName?: string\r\n) {\r\n  if (functionName) {\r\n    if (dataSource === \"QUERY\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        const queryObject: FunctionObjectCall = { functionName };\r\n        for (let q in req.query) {\r\n          queryObject[q] = req.query[q];\r\n        }\r\n        queryObject.functionName = functionName;\r\n        const result = await runner.runObj(queryObject);\r\n        res.send(result);\r\n      };\r\n    } else if (dataSource === \"PARAMS\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        const queryObject: FunctionObjectCall = { functionName };\r\n        for (let q in req.params) {\r\n          queryObject[q] = req.params[q];\r\n        }\r\n        queryObject.functionName = functionName;\r\n        const result = await runner.runObj(queryObject);\r\n        res.send(result);\r\n      };\r\n    } else {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        const result = await runner.runObj({ ...req.body, functionName });\r\n\r\n        res.send(result);\r\n      };\r\n    }\r\n  } else {\r\n    if (dataSource === \"QUERY\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        if (!req.query.functionName) {\r\n          throw \"functionName is required in query\";\r\n        }\r\n        const queryObject: FunctionObjectCall = {\r\n          functionName: req.query.functionName as string,\r\n        };\r\n        for (let q in req.query) {\r\n          queryObject[q] = req.query[q];\r\n        }\r\n\r\n        const result = await runner.runObj(queryObject);\r\n        res.send(result);\r\n      };\r\n    } else if (dataSource === \"PARAMS\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        if (!req.params.functionName) {\r\n          throw \"functionName is required in query\";\r\n        }\r\n        const queryObject: FunctionObjectCall = {\r\n          functionName: req.params.functionName as string,\r\n        };\r\n        for (let q in req.params) {\r\n          queryObject[q] = req.params[q];\r\n        }\r\n\r\n        const result = await runner.runObj(queryObject);\r\n        res.send(result);\r\n      };\r\n    } else {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        if (!req.body.functionName) {\r\n          throw \"functionName is required in body\";\r\n        }\r\n        const result = await runner.runObj({ ...req.body });\r\n\r\n        res.send(result);\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets an express middleware for running a function. The function result\r\n * will be stored in req.functionResult\r\n * @param runner The function runner\r\n * @param dataSource Where to get the input data from\r\n * @param functionName The function name to be executed, if null the function name will be taken from the input data\r\n * @returns async (req: Request, res: Response, next: NextFunction)\r\n */\r\nexport function getExpressMiddleware(\r\n  runner: Functioneer,\r\n  dataSource: \"BODY\" | \"PARAMS\" | \"QUERY\",\r\n  functionName?: string\r\n) {\r\n  if (functionName) {\r\n    if (dataSource === \"QUERY\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        const queryObject: FunctionObjectCall = { functionName };\r\n        for (let q in req.query) {\r\n          queryObject[q] = req.query[q];\r\n        }\r\n        queryObject.functionName = functionName;\r\n        const result = await runner.runObj(queryObject);\r\n        req[\"functionResult\"] = result;\r\n        next();\r\n      };\r\n    } else if (dataSource === \"PARAMS\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        const queryObject: FunctionObjectCall = { functionName };\r\n        for (let q in req.params) {\r\n          queryObject[q] = req.params[q];\r\n        }\r\n        queryObject.functionName = functionName;\r\n        const result = await runner.runObj(queryObject);\r\n        req[\"functionResult\"] = result;\r\n        next();\r\n      };\r\n    } else {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        const result = await runner.runObj({ ...req.body, functionName });\r\n        req[\"functionResult\"] = result;\r\n        next();\r\n      };\r\n    }\r\n  } else {\r\n    if (dataSource === \"QUERY\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        if (!req.query.functionName) {\r\n          throw \"functionName is required in query\";\r\n        }\r\n        const queryObject: FunctionObjectCall = {\r\n          functionName: req.query.functionName as string,\r\n        };\r\n        for (let q in req.query) {\r\n          queryObject[q] = req.query[q];\r\n        }\r\n        const result = await runner.runObj(queryObject);\r\n        req[\"functionResult\"] = result;\r\n        next();\r\n      };\r\n    } else if (dataSource === \"PARAMS\") {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        if (!req.params.functionName) {\r\n          throw \"functionName is required in params\";\r\n        }\r\n        const queryObject: FunctionObjectCall = {\r\n          functionName: req.params.functionName as string,\r\n        };\r\n        for (let q in req.params) {\r\n          queryObject[q] = req.params[q];\r\n        }\r\n        const result = await runner.runObj(queryObject);\r\n        req[\"functionResult\"] = result;\r\n        next();\r\n      };\r\n    } else {\r\n      return async (req: Request, res: Response, next: NextFunction) => {\r\n        if (!req.body.functionName) {\r\n          throw \"functionName is required in body\";\r\n        }\r\n        const result = await runner.runObj({\r\n          ...req.body,\r\n          functionName: req.body.functionName as string,\r\n        });\r\n        req[\"functionResult\"] = result;\r\n        next();\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAWO,SAAS,kBACd,QACA,YACA,cACA;AACA,MAAI,cAAc;AAChB,QAAI,eAAe,SAAS;AAC1B,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,cAAM,cAAkC,EAAE,aAAa;AACvD,iBAAS,KAAK,IAAI,OAAO;AACvB,sBAAY,CAAC,IAAI,IAAI,MAAM,CAAC;AAAA,QAC9B;AACA,oBAAY,eAAe;AAC3B,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,KAAK,MAAM;AAAA,MACjB;AAAA,IACF,WAAW,eAAe,UAAU;AAClC,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,cAAM,cAAkC,EAAE,aAAa;AACvD,iBAAS,KAAK,IAAI,QAAQ;AACxB,sBAAY,CAAC,IAAI,IAAI,OAAO,CAAC;AAAA,QAC/B;AACA,oBAAY,eAAe;AAC3B,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,KAAK,MAAM;AAAA,MACjB;AAAA,IACF,OAAO;AACL,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,cAAM,SAAS,MAAM,OAAO,OAAO,EAAE,GAAG,IAAI,MAAM,aAAa,CAAC;AAEhE,YAAI,KAAK,MAAM;AAAA,MACjB;AAAA,IACF;AAAA,EACF,OAAO;AACL,QAAI,eAAe,SAAS;AAC1B,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,YAAI,CAAC,IAAI,MAAM,cAAc;AAC3B,gBAAM;AAAA,QACR;AACA,cAAM,cAAkC;AAAA,UACtC,cAAc,IAAI,MAAM;AAAA,QAC1B;AACA,iBAAS,KAAK,IAAI,OAAO;AACvB,sBAAY,CAAC,IAAI,IAAI,MAAM,CAAC;AAAA,QAC9B;AAEA,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,KAAK,MAAM;AAAA,MACjB;AAAA,IACF,WAAW,eAAe,UAAU;AAClC,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,YAAI,CAAC,IAAI,OAAO,cAAc;AAC5B,gBAAM;AAAA,QACR;AACA,cAAM,cAAkC;AAAA,UACtC,cAAc,IAAI,OAAO;AAAA,QAC3B;AACA,iBAAS,KAAK,IAAI,QAAQ;AACxB,sBAAY,CAAC,IAAI,IAAI,OAAO,CAAC;AAAA,QAC/B;AAEA,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,KAAK,MAAM;AAAA,MACjB;AAAA,IACF,OAAO;AACL,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,YAAI,CAAC,IAAI,KAAK,cAAc;AAC1B,gBAAM;AAAA,QACR;AACA,cAAM,SAAS,MAAM,OAAO,OAAO,EAAE,GAAG,IAAI,KAAK,CAAC;AAElD,YAAI,KAAK,MAAM;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AACF;AAUO,SAAS,qBACd,QACA,YACA,cACA;AACA,MAAI,cAAc;AAChB,QAAI,eAAe,SAAS;AAC1B,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,cAAM,cAAkC,EAAE,aAAa;AACvD,iBAAS,KAAK,IAAI,OAAO;AACvB,sBAAY,CAAC,IAAI,IAAI,MAAM,CAAC;AAAA,QAC9B;AACA,oBAAY,eAAe;AAC3B,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,gBAAgB,IAAI;AACxB,aAAK;AAAA,MACP;AAAA,IACF,WAAW,eAAe,UAAU;AAClC,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,cAAM,cAAkC,EAAE,aAAa;AACvD,iBAAS,KAAK,IAAI,QAAQ;AACxB,sBAAY,CAAC,IAAI,IAAI,OAAO,CAAC;AAAA,QAC/B;AACA,oBAAY,eAAe;AAC3B,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,gBAAgB,IAAI;AACxB,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,cAAM,SAAS,MAAM,OAAO,OAAO,EAAE,GAAG,IAAI,MAAM,aAAa,CAAC;AAChE,YAAI,gBAAgB,IAAI;AACxB,aAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF,OAAO;AACL,QAAI,eAAe,SAAS;AAC1B,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,YAAI,CAAC,IAAI,MAAM,cAAc;AAC3B,gBAAM;AAAA,QACR;AACA,cAAM,cAAkC;AAAA,UACtC,cAAc,IAAI,MAAM;AAAA,QAC1B;AACA,iBAAS,KAAK,IAAI,OAAO;AACvB,sBAAY,CAAC,IAAI,IAAI,MAAM,CAAC;AAAA,QAC9B;AACA,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,gBAAgB,IAAI;AACxB,aAAK;AAAA,MACP;AAAA,IACF,WAAW,eAAe,UAAU;AAClC,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,YAAI,CAAC,IAAI,OAAO,cAAc;AAC5B,gBAAM;AAAA,QACR;AACA,cAAM,cAAkC;AAAA,UACtC,cAAc,IAAI,OAAO;AAAA,QAC3B;AACA,iBAAS,KAAK,IAAI,QAAQ;AACxB,sBAAY,CAAC,IAAI,IAAI,OAAO,CAAC;AAAA,QAC/B;AACA,cAAM,SAAS,MAAM,OAAO,OAAO,WAAW;AAC9C,YAAI,gBAAgB,IAAI;AACxB,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,aAAO,OAAO,KAAc,KAAe,SAAuB;AAChE,YAAI,CAAC,IAAI,KAAK,cAAc;AAC1B,gBAAM;AAAA,QACR;AACA,cAAM,SAAS,MAAM,OAAO,OAAO;AAAA,UACjC,GAAG,IAAI;AAAA,UACP,cAAc,IAAI,KAAK;AAAA,QACzB,CAAC;AACD,YAAI,gBAAgB,IAAI;AACxB,aAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF;AACF;","names":[]}